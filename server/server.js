// server.js
const express = require('express');
const dotenv = require('dotenv');
const db = require('./config/db');
const delfoiRoutes = require('./routes/delfoiRoutes');
const { fetchAndStoreDelfoiData } = require('./controllers/delfoiController');

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

app.use(express.json());
app.use('/api/delfoi', delfoiRoutes);

// Fonction pour ex√©cuter la r√©cup√©ration des donn√©es sans chevauchement
let isFetching = false;
const executeDataFetch = async () => {
    if (isFetching) {
        console.log("‚ö†Ô∏è Une ex√©cution est d√©j√† en cours, on ignore cette ex√©cution...");
        return;
    }

    isFetching = true;
    console.log("üîÑ Ex√©cution de fetchAndStoreDelfoiData...");
    
    try {
        await fetchAndStoreDelfoiData();
        console.log("‚úÖ R√©cup√©ration et stockage des donn√©es termin√©s !");
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es :", error);
    } finally {
        isFetching = false;
    }
};

// Ex√©cuter imm√©diatement fetchAndStoreDelfoiData au d√©marrage du serveur
console.log("üöÄ Ex√©cution initiale de fetchAndStoreDelfoiData...");
executeDataFetch();

// Ex√©cuter fetchAndStoreDelfoiData toutes les 3 minutes
setInterval(() => {
    console.log("üïí Planification de fetchAndStoreDelfoiData...");
    executeDataFetch();
}, 180000); // 180000 ms = 3 minutes

app.listen(PORT, () => {
    console.log(`‚úÖ Serveur d√©marr√© sur le port ${PORT}`);
});
