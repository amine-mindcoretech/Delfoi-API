//wrikeTasksController.js
const axios = require('axios');
const db = require('../config/db');

const WRIKE_API_TOKEN = process.env.WRIKE_API_TOKEN;
const HEADERS = {
    Authorization: `Bearer ${WRIKE_API_TOKEN}`,
    'Content-Type': 'application/json'
};

// üîπ Fonction pour obtenir la date des 3 derniers jours au format ISO
const getThreeDaysAgoDate = () => {
    const date = new Date();
    date.setUTCDate(date.getUTCDate() - 3);
    return date.toISOString().split('T')[0]; // R√©cup√©rer uniquement la date (YYYY-MM-DD)
};

const getTodayDate = () => {
    return new Date().toISOString().split('T')[0];
};

// üîπ Fonction pour formater une date ISO en format YYYY-MM-DD (sans l‚Äôheure)
const formatDateForMySQL = (isoDate) => {
    if (!isoDate || isoDate.trim() === "") return null;
    return isoDate.split('T')[0]; // Garder uniquement la date
};

// üîπ Fonction pour formater les noms de colonnes pour la base de donn√©es
const formatColumnName = (title) => {
    return 'custom_' + title
        .toLowerCase()
        .trim()
        .replace(/[^a-z0-9]+/g, '_') // Remplace les caract√®res sp√©ciaux par '_'
        .replace(/_+$/, ''); // Supprime les underscores √† la fin
};

// üîπ Fonction pour convertir les types Wrike en types SQL
const mapWrikeTypeToSQL = (wrikeType) => {
    switch (wrikeType) {
        case 'Numeric':
        case 'Percentage':
        case 'Currency':
            return 'DECIMAL(15,2)';
        case 'Date':
            return 'DATE';
        case 'Checkbox':
            return 'BOOLEAN';
        case 'DropDown':
        case 'Text':
        default:
            return 'TEXT';
    }
};
// üîπ Extraire FM_LINK : tout ce qui commence par [MP- et finit soit par ] soit par un espace ou fin de ligne
const extractFMLink = (title) => {
    const match = title.match(/\[(MP-[^\]\s]+)/i) || title.match(/(MP-[^\]\s]+)/i);
    return match ? match[1].trim() : null;
};

// üîπ Extraire Task_Description : on retire tous les blocs [MP-...] m√™me mal ferm√©s
const extractTaskDescription = (title) => {
    return title
        .replace(/\[(MP-[^\]]*?)\]/gi, '')  // Supprime [MP-....]
        .replace(/(MP-[^\]\s]+)\s*/gi, '') // Supprime les MP-... sans crochets
        .replace(/^\s*[-‚Äì]\s*/, '')        // Supprime les tirets de s√©paration
        .trim();
};

// üîπ Extraire FM_NoCom : bas√© sur ce qui suit MP- (alphanum√©rique, avant un tiret si pr√©sent)
const extractFMNoCom = (title) => {
    const match = title.match(/MP-([A-Z#0-9]+)/i);
    if (!match) return null;

    const baseCode = match[1].split('-')[0].toUpperCase();
    return `0000${baseCode}`;
};
//https://www.wrike.com/api/v4/tasks?createdDate={"start":"2017-01-01T00:00:00Z"}&fields=["parentIds","customFields"]
//https://www.wrike.com/api/v4/tasks?updatedDate={"start":"2024-03-14T00:00:00Z","end":"2024-03-17T23:59:59Z"}&fields=["parentIds","customFields"]

// üîπ Cr√©ation de la table `wrike_tasks` si elle n'existe pas
const createWrikeTasksTable = async () => {
    try {
        await db.execute(`
            CREATE TABLE IF NOT EXISTS wrike_tasks (
                Id VARCHAR(50) PRIMARY KEY,
                AccountId VARCHAR(50),
                Title TEXT,
                Status VARCHAR(100),
                Importance VARCHAR(100),
                Permalink TEXT,
                CustomStatusId VARCHAR(50),
                CompletedDate DATE,
                CreatedDate DATE,
                UpdatedDate DATE,
                FM_NoCom VARCHAR(50),
                FM_LINK VARCHAR(100),
                Task_Due DATE,
                Task_Start DATE,
                Task_Duration INT,
                Task_Description TEXT,
                ParentIds TEXT,
                Task_datecount INT
            )
        `);
        console.log("‚úÖ Table `wrike_tasks` v√©rifi√©e/cr√©√©e.");
    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation de la table `wrike_tasks` :", error.message);
    }
};

// üîπ R√©cup√©rer la liste des Custom Fields de Wrike et les ajouter √† la table
const ensureCustomFieldsExist = async () => {
    try {
        console.log("üîÑ V√©rification des champs personnalis√©s...");

        const response = await axios.get("https://www.wrike.com/api/v4/customfields", { headers: HEADERS });
        const data = response.data;
        if (!data || !data.data) {
            console.warn("‚ö†Ô∏è Aucun champ personnalis√© r√©cup√©r√©.");
            return {};
        }

        const [rows] = await db.execute("SHOW COLUMNS FROM wrike_tasks");
        const existingColumns = rows.map(row => row.Field);

        const customFieldMap = {};
        const customFieldTypes = {};

        for (const field of data.data) {
            const columnName = formatColumnName(field.title);
            const columnType = mapWrikeTypeToSQL(field.type);

            if (!existingColumns.includes(columnName)) {
                await db.execute(`ALTER TABLE wrike_tasks ADD COLUMN ${columnName} ${columnType}`);
                console.log(`‚úÖ Nouvelle colonne ajout√©e : ${columnName} (${columnType})`);
            }
            customFieldMap[field.id] = columnName;
            customFieldTypes[columnName] = columnType;
        }

        return { customFieldMap, customFieldTypes };
    } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification des champs personnalis√©s :", error.message);
        return { customFieldMap: {}, customFieldTypes: {} };
    }
};


// üîπ Fonction pour ajuster dynamiquement la p√©riode de r√©cup√©ration
const adjustRetrievalPeriod = async (startDate, customFieldMap, customFieldTypes) => {
    let period = 6; // P√©riode initiale de r√©cup√©ration (6 jours)
    let totalFetched = 0;
    let today = new Date();

    while (startDate <= today) {
        let endDate = new Date(startDate);
        endDate.setDate(startDate.getDate() + period);
        if (endDate > today) endDate = today; // √âviter de d√©passer la date actuelle

        let startStr = startDate.toISOString().split("T")[0] + "T00:00:00Z";
        let endStr = endDate.toISOString().split("T")[0] + "T23:59:59Z";

        console.log(`üìÖ R√©cup√©ration des t√¢ches du ${startStr} au ${endStr}...`);

        let url = `https://www.wrike.com/api/v4/tasks?createdDate={"start":"${startStr}","end":"${endStr}"}&fields=["parentIds","customFields"]`;
        const response = await axios.get(url, { headers: HEADERS });

        const tasks = response.data?.data || [];
        console.log(`üì• ${tasks.length} t√¢ches r√©cup√©r√©es.`);

        for (const task of tasks) {
            await insertOrUpdateTask(task, customFieldMap, customFieldTypes);
        }

        totalFetched += tasks.length;

        // ‚ö†Ô∏è Si on atteint 1000 t√¢ches r√©cup√©r√©es, r√©duire temporairement la p√©riode √† 2 jours
        if (tasks.length === 1000) {
            console.warn("‚ö†Ô∏è 1000 t√¢ches r√©cup√©r√©es, r√©duction de la p√©riode √† 2 jours pour √©viter les pertes.");
            period = 2;
        }

        // ‚úÖ Si la p√©riode a √©t√© r√©duite et que moins de 1000 t√¢ches sont r√©cup√©r√©es, retour √† 6 jours
        if (period === 2 && tasks.length < 1000) {
            console.log("‚úÖ Toutes les t√¢ches ont √©t√© r√©cup√©r√©es, retour √† une p√©riode de 6 jours.");
            period = 6;
        }

        // ‚è© Passer √† la prochaine p√©riode
        startDate.setDate(startDate.getDate() + period);
    }

    console.log(`‚úÖ R√©cup√©ration termin√©e avec ${totalFetched} t√¢ches Wrike enregistr√©es.`);
};

// üîπ Fonction principale pour r√©cup√©rer et stocker les t√¢ches Wrike
const fetchAndStoreWrikeTasks = async () => {
    try {
        console.log("üöÄ D√©marrage de la r√©cup√©ration compl√®te des t√¢ches Wrike...");

        // 1Ô∏è‚É£ Cr√©ation de la table si elle n'existe pas
        await createWrikeTasksTable();

        // 2Ô∏è‚É£ V√©rification et r√©cup√©ration des champs personnalis√©s
        const { customFieldMap, customFieldTypes } = await ensureCustomFieldsExist();

        // 3Ô∏è‚É£ Lancer la r√©cup√©ration avec ajustement dynamique
        let startDate = new Date("2017-06-23");
        await adjustRetrievalPeriod(startDate, customFieldMap, customFieldTypes);

    } catch (error) {
        console.error("‚ùå Erreur lors de l'insertion des donn√©es Wrike :", error.message);
    }
};


// üîπ Fonction d'insertion / mise √† jour des t√¢ches
const insertOrUpdateTask = async (task, customFieldMap, customFieldTypes) => {
    try {
        if (!task.id || !task.accountId || !task.title) return;

        // üìå **Nouveau Filtrage : Ne traiter que les t√¢ches commen√ßant par `[MP-`**
        if (!task.title.startsWith("[MP-")) {
            //console.warn(`‚è© T√¢che ignor√©e car son titre ne commence pas par "[MP-": ${task.title}`);
            return;
        }

        // Extraction des champs sp√©cifiques
        const fmNoCom = extractFMNoCom(task.title);
        const fmLink = extractFMLink(task.title);
        const taskDescription = extractTaskDescription(task.title);
        const parentIds = task.parentIds?.join(', ') || null;

        // Formatage des dates
        const createdDate = formatDateForMySQL(task.createdDate) || null;
        const updatedDate = formatDateForMySQL(task.updatedDate) || null;
        const completedDate = task.completedDate ? formatDateForMySQL(task.completedDate) : null;
        const taskDue = task.dates?.due ? formatDateForMySQL(task.dates.due) : null;
        const taskStart = task.dates?.start ? formatDateForMySQL(task.dates.start) : null;

        // Calcul du `Task_datecount`
        const taskDateCount = [createdDate, updatedDate, taskDue].filter(date => date !== null).length;
        const taskDuration = task.dates?.duration !== undefined ? task.dates.duration : null;
        // Pr√©paration des champs et valeurs pour l'INSERT / UPDATE
        const fields = [
            "ID",
            "AccountId",
            "Title",
            "Status",
            "Importance",
            "Permalink",
            "CustomStatusId",
            "CompletedDate",
            "CreatedDate",
            "UpdatedDate",
            "FM_NoCom",
            "FM_LINK",
            "Task_Due",
            "Task_Start",
            "Task_Duration",
            "Task_Description",
            "ParentIds",
            "Task_datecount"
        ];
        const values = [
            task.id,
            task.accountId,
            task.title,
            task.status || null,
            task.importance || null,
            task.permalink || null,
            task.customStatusId || null,
            completedDate,
            createdDate,
            updatedDate,
            fmNoCom,
            fmLink,
            taskDue,
            taskStart,
            task.dates.duration,
            taskDescription,
            parentIds,
            taskDateCount
        ];

        // Ajout des champs personnalis√©s
        for (const field of task.customFields || []) {
            if (customFieldMap[field.id]) {
                let value = field.value !== undefined ? field.value : null;

                // Adaptation des types de donn√©es
                if (customFieldTypes[customFieldMap[field.id]] === 'DATE') {
                    value = formatDateForMySQL(value);
                } else if (customFieldTypes[customFieldMap[field.id]] === 'DECIMAL(15,2)') {
                    value = (value === "" || value === null) ? null : parseFloat(value);
                } else if (customFieldTypes[customFieldMap[field.id]] === 'BOOLEAN') {
                    value = value === true ? 1 : value === false ? 0 : null;
                }

                fields.push(customFieldMap[field.id]);
                values.push(value);
            }
        }

        // ‚úÖ V√©rification avant l'insertion pour √©viter tout `undefined`
        values.forEach((val, index) => {
            if (val === undefined) {
                //console.warn(`‚ö†Ô∏è Valeur undefined d√©tect√©e dans ${fields[index]}, remplacement par NULL.`);
                values[index] = null;
            }
        });


        // Construction de la requ√™te SQL
        const placeholders = fields.map(() => "?").join(", ");
        const updateFields = fields.map(col => `${col} = VALUES(${col})`).join(", ");

        await db.execute(`
            INSERT INTO wrike_tasks (${fields.join(", ")}) 
            VALUES (${placeholders}) 
            ON DUPLICATE KEY UPDATE ${updateFields}
        `, values);

    } catch (error) {
        console.error(`‚ùå Erreur lors de l'insertion/mise √† jour de la t√¢che ${task.id} :`, error.message);
    }
};
// üîπ Fonction pour mettre √† jour uniquement les t√¢ches des 3 derniers jours
const updateRecentWrikeTasks = async () => {
    try {
        console.log("üîÑ Mise √† jour des t√¢ches Wrike des 3 derniers jours avec gestion avanc√©e de la pagination...");

        // 1Ô∏è‚É£ R√©cup√©ration de la date des 3 derniers jours
        let startDate = new Date();
        startDate.setUTCDate(startDate.getUTCDate() - 3);
        let today = new Date();
        let period = 3; // Intervalle initial : 3 jours

        let totalTasksFetched = 0; // Suivi du total des t√¢ches mises √† jour

        // 2Ô∏è‚É£ R√©cup√©ration des Custom Fields et leur mapping
        const { customFieldMap, customFieldTypes } = await ensureCustomFieldsExist();

        while (startDate <= today) {
            let endDate = new Date(startDate);
            endDate.setUTCDate(startDate.getUTCDate() + period);
            if (endDate > today) endDate = today;

            let startStr = startDate.toISOString().split("T")[0] + "T00:00:00Z";
            let endStr = endDate.toISOString().split("T")[0] + "T23:59:59Z";

            console.log(`üìÖ R√©cup√©ration des t√¢ches mises √† jour du ${startStr} au ${endStr}...`);

            let totalFetchedForPeriod = 0;

            // 3Ô∏è‚É£ Pagination via nextPageToken
            let nextPageToken = null;
            let retryCount = 0;

            do {
                try {
                    // 4Ô∏è‚É£ Construction de l'URL avec pagination
                    let url = `https://www.wrike.com/api/v4/tasks?updatedDate={"start":"${startStr}","end":"${endStr}"}&fields=["parentIds","customFields"]&pageSize=1000`;
                    if (nextPageToken) {
                        url += `&nextPageToken=${nextPageToken}`;
                    }

                    // 5Ô∏è‚É£ Appel API avec gestion des erreurs
                    const response = await axios.get(url, { headers: HEADERS });
                    const tasks = response.data?.data || [];
                    nextPageToken = response.data?.nextPageToken || null;

                    console.log(`üì• Page r√©cup√©r√©e: ${tasks.length} t√¢ches.`);

                    // 6Ô∏è‚É£ Mise √† jour des t√¢ches r√©cup√©r√©es
                    for (const task of tasks) {
                        await insertOrUpdateTask(task, customFieldMap, customFieldTypes);
                    }

                    totalFetchedForPeriod += tasks.length;
                    totalTasksFetched += tasks.length;
                    retryCount = 0; // R√©initialiser les tentatives apr√®s un succ√®s

                } catch (error) {
                    console.error(`‚ùå Erreur lors de la r√©cup√©ration des t√¢ches (Tentative ${retryCount + 1})`, error.message);

                    if (retryCount < 3) {
                        console.warn("üîÑ Nouvelle tentative apr√®s erreur...");
                        retryCount++;
                        await new Promise(resolve => setTimeout(resolve, 5000)); // Attente de 5 secondes avant de r√©essayer
                    } else {
                        console.error("‚õî Abandon apr√®s 3 tentatives.");
                        break;
                    }
                }

            } while (nextPageToken); // Continuer tant que `nextPageToken` est pr√©sent

            console.log(`‚úÖ P√©riode ${startStr} -> ${endStr} : ${totalFetchedForPeriod} t√¢ches enregistr√©es.`);

            // 7Ô∏è‚É£ Passer √† la p√©riode suivante
            startDate.setUTCDate(startDate.getUTCDate() + period);
        }

        console.log(`‚úÖ Mise √† jour termin√©e : ${totalTasksFetched} t√¢ches Wrike mises √† jour.`);

    } catch (error) {
        console.error("‚ùå Erreur lors de la mise √† jour des t√¢ches Wrike :", error.message);
    }
};



// üîÑ Planification automatique toutes les 30 minutes
//setInterval(fetchAndStoreWrikeTasks, 30 * 60 * 1000);

module.exports = { fetchAndStoreWrikeTasks, createWrikeTasksTable, updateRecentWrikeTasks };
